# -*- coding: utf-8 -*-
"""
Replication of Rust (1987)
This exercise is based on notes in https://notes.quantecon.org/submission/6234fe0f96e1ce001b61fad8.
"""
#%% Step 0 Data Preparation

%reset -f

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import minimize, fixed_point
from numba import njit, float64, float32, int64, prange
from numba.experimental import jitclass

# Step 0: Data Preparation

group_1_raw = pd.read_csv("../data/g870.asc", header=None)
group_1_raw = pd.DataFrame(np.array(group_1_raw).reshape((36, 15), order="F"))

group_2_raw = pd.read_csv('../data/rt50.asc', header=None)
group_2_raw = pd.DataFrame(np.array(group_2_raw).reshape((60, 4), order="F"))

group_3_raw = pd.read_csv('../data/t8h203.asc', header=None)
group_3_raw = pd.DataFrame(np.array(group_3_raw).reshape((81, 48), order="F"))

group_4_raw = pd.read_csv('../data/a530875.asc', header=None)
group_4_raw = pd.DataFrame(np.array(group_4_raw).reshape((128, 37), order="F"))

def extract_info(group_data):
    '''
    Inputs: group_data - (T+11) by N DataFrame with the first 11 rows containing bus history.
    Return: cleaned group_data, and choice
    '''
    
    # Step 0.1: 
        # Extract the first 11 rows into a new DataFrame in which the 
        # specific information is stroed in indexes and columns are bus numbers.
    
    # Extract information and assign proper indexes and columns for bus_info

    bus_info = group_data[0:11] # row 0, 1, ... 10

    index_bus_info = ['bus_number', 'month_purchased', 'year_purchased', 
                      'month_replacement_1', 'year_replacement_1', 'mile_replacement_1', 
                      'month_replacement_2', 'year_replacement_2', 'mile_replacement_2',
                      'month_begin', 'year_begin']
    bus_info.index = index_bus_info
    bus_info.index.name = "bus_info"
    bus_info.columns = bus_info.loc["bus_number"]
    bus_info.columns.name = "bus_number"
    bus_info = bus_info[1:]

    # Keep only mileage usage data for each bus in each operation month
    # Also, assign proper indexes and columns for group_data

    group_data.columns = bus_info.columns
    group_data.columns.name = "bus_number"
    group_data = group_data[11:]

    month_begin = bus_info.loc["month_begin"].iloc[0]
    year_begin = bus_info.loc["year_begin"].iloc[0]
    begin_date = f"{year_begin:d}-{month_begin:02d}-01"
    group_data.index = pd.date_range(start=begin_date, \
                                      periods=len(group_data), freq="MS")
    group_data.index.name = "operation_month"
    
    # Step 0.2:
        # Get when engine replacement occurs
        # Get cumulative mileage since last replacement
            
    # Get to know when the replacement occurs by finding the month in which 
    # (mile_replacement_i < cumulative mile usage) and (mile_replacement_i != 0)

    replacement_1 = (bus_info.loc["mile_replacement_1"] < group_data)
    no_replacement_1 = bus_info.loc[:,(bus_info.loc["mile_replacement_1"] == 0)].columns
    replacement_1.loc[:, no_replacement_1] = False

    replacement_2 = (bus_info.loc["mile_replacement_2"] < group_data)
    no_replacement_2 = bus_info.loc[:,(bus_info.loc["mile_replacement_2"] == 0)].columns
    replacement_2.loc[:, no_replacement_2] = False

    choice_1 = replacement_1.copy()
    choice_2 = replacement_2.copy()
    choice_1[replacement_1.cumsum() != 1] = 0
    choice_2[replacement_2.cumsum() != 1] = 0

    choice = choice_1 + choice_2
    
    data_cleaned = group_data.copy()
    
    for bus in range(group_data.shape[1]):
        
        last_mile_1 = group_data[choice_1==1].iloc[:,bus].max()
        last_mile_2 = group_data[choice_2==1].iloc[:,bus].max()
        
        for time in range(group_data.shape[0]):
            
            if time <= group_data.shape[0]-2:
                
                if replacement_1.iloc[time, bus]==True and replacement_2.iloc[time, bus]==False:
                    data_cleaned.iloc[(time+1), bus] = \
                        group_data.iloc[(time+1), bus] - last_mile_1
                        
                elif replacement_1.iloc[time, bus]==True and replacement_2.iloc[time, bus]==True:
                    data_cleaned.iloc[(time+1), bus] = \
                        group_data.iloc[(time+1), bus] - last_mile_2
        
    return data_cleaned, choice, bus_info

group_1, choice_1, bus_info_1 = extract_info(group_1_raw)
group_2, choice_2, bus_info_2 = extract_info(group_2_raw) 
group_3, choice_3, bus_info_3 = extract_info(group_3_raw)
group_4, choice_4, bus_info_4 = extract_info(group_4_raw) 

''' Compare the returned group_j datasets with those generated by matlab

test_1 = pd.read_csv('../matlab-codes/group_1.csv', header=None)
test_2 = pd.read_csv('../matlab-codes/group_2.csv', header=None)
test_3 = pd.read_csv('../matlab-codes/group_3.csv', header=None)
test_4 = pd.read_csv('../matlab-codes/group_4.csv', header=None)
test_4.index = group_4.index
test_4.columns = group_4.columns
group_4.compare(test_4)

'''

group_1to4 = pd.concat([group_1, group_2, group_3, group_4], axis=1, join="outer")
choice_1to4 = pd.concat([choice_1, choice_2, choice_3, choice_4], axis=1, join="outer")

def discretize(b, d=5000):
    '''Discretizes odometer data into buckets of length d'''

    return np.floor(b / d)


data_1to4 = pd.concat([discretize(group_1to4.T.stack()), choice_1to4.T.stack()], axis=1)
data_1to4.columns = ["state_var", "choice"]

group_discrete = discretize(group_1to4)
temp = group_discrete - group_discrete.shift(1)

state_difference = temp.copy()
state_difference[temp < 0] = np.nan

N = state_difference.notna().sum().sum()
p0 = (state_difference == 0).sum().sum() / N
p1 = (state_difference == 1).sum().sum() / N
(p0, p1)


#%% Step 1 Setting up the Model

spec = [('beta', float64),
        ('theta', float64),
        ('RC', float64),
        ('T', int64),
        ('p0', float64),
        ('p1', float64),
        ('scale', float64),
        ('P', float64[:, :]),
        ('x', float64[:])]

@jitclass(spec)
class Rust(object):
    
    def __init__(self, beta=0.9999, theta=3.6, RC=10,
                 T=90, p0=0.3497, p1=0.6387, scale=0.001):
        self.beta = beta
        self.theta = theta
        self.RC = RC
        self.T = T
        self.p0 = p0
        self.p1 = p1
        self.scale = scale
        
        P = np.zeros((T, T))
        np.fill_diagonal(P, p0)
        P = P + np.diagonal(np.ones(T-1) * p1, 1)
        P[:, -1] = += 1 - P.sum(1)
        self.P = P
        
        self.x = np.arange(T, dtype=float64)

@njit
def c(x, rust):
    scale = rust.scale
    theta = rust.theta
    
    return scale * theta * x

@njit
def u(x, i, rust):
    if i==0:
        return -c(x, rust)
    elif i==1:
        return -c(x, rust) - rust.RC

#%% Solving the Innter Loop

@njit
def solve_EV(rust, tol=1e-3, maxiter=300_000, print_flag=False):
    
    T = rust.T
    beta = rust.beta
    P = np.ascontiguousarray(rust.P)

    EV = np.zeros(T)
    
    # Bellman operator
    def T(EV):
        wait = u(x, 0, rust) + beta * EV
        replace = u(x, 1, rust) + beta * EV[0]
        EV_new = np.exp(replace - EV) + np.exp(wait - EV)
        EV_new = P @ (np.log(EV_new) + EV)
        return EV_new